// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/e2/task/v1beta1/task.proto

// Package e2.task.v1beta1 defines the interior gRPC interface for E2 termination registry service

package v1beta1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_onosproject_onos_e2sub_api_e2_registry_v1beta1 "github.com/onosproject/onos-e2sub/api/e2/registry/v1beta1"
	github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1 "github.com/onosproject/onos-e2sub/api/e2/subscription/v1beta1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Phase is a subscription task phase
type Phase int32

const (
	// OPEN is a subscription task open phase
	Phase_OPEN Phase = 0
	// CLOSE is a subscription task close phase
	Phase_CLOSE Phase = 1
)

var Phase_name = map[int32]string{
	0: "OPEN",
	1: "CLOSE",
}

var Phase_value = map[string]int32{
	"OPEN":  0,
	"CLOSE": 1,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}

func (Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{0}
}

// Status is a subscription task status
type Status int32

const (
	// PENDING indicates the subscription task phase is pending
	Status_PENDING Status = 0
	// COMPLETE indicates the subscription task phase is complete
	Status_COMPLETE Status = 1
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "COMPLETE",
}

var Status_value = map[string]int32{
	"PENDING":  0,
	"COMPLETE": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{1}
}

// Type of change
type EventType int32

const (
	EventType_NONE    EventType = 0
	EventType_CREATED EventType = 1
	EventType_UPDATED EventType = 2
	EventType_REMOVED EventType = 3
)

var EventType_name = map[int32]string{
	0: "NONE",
	1: "CREATED",
	2: "UPDATED",
	3: "REMOVED",
}

var EventType_value = map[string]int32{
	"NONE":    0,
	"CREATED": 1,
	"UPDATED": 2,
	"REMOVED": 3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{2}
}

// State is a subscription task state
type State struct {
	Phase  Phase  `protobuf:"varint,1,opt,name=phase,proto3,enum=task.v1beta1.Phase" json:"phase,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=task.v1beta1.Status" json:"status,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetPhase() Phase {
	if m != nil {
		return m.Phase
	}
	return Phase_OPEN
}

func (m *State) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

// SubscriptionTask is a task representing a subscription between an E2 termination and an E2 node
type SubscriptionTask struct {
	ID                    ID                                                               `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	Revision              Revision                                                         `protobuf:"varint,2,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	SubscriptionID        github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1.ID `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3,casttype=github.com/onosproject/onos-e2sub/api/e2/subscription/v1beta1.ID" json:"subscription_id,omitempty"`
	TerminationEndpointID github_com_onosproject_onos_e2sub_api_e2_registry_v1beta1.ID     `protobuf:"bytes,4,opt,name=termination_endpoint_id,json=terminationEndpointId,proto3,casttype=github.com/onosproject/onos-e2sub/api/e2/registry/v1beta1.ID" json:"termination_endpoint_id,omitempty"`
	State                 State                                                            `protobuf:"bytes,5,opt,name=state,proto3" json:"state"`
}

func (m *SubscriptionTask) Reset()         { *m = SubscriptionTask{} }
func (m *SubscriptionTask) String() string { return proto.CompactTextString(m) }
func (*SubscriptionTask) ProtoMessage()    {}
func (*SubscriptionTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{1}
}
func (m *SubscriptionTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionTask.Merge(m, src)
}
func (m *SubscriptionTask) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionTask) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionTask.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionTask proto.InternalMessageInfo

func (m *SubscriptionTask) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SubscriptionTask) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *SubscriptionTask) GetSubscriptionID() github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1.ID {
	if m != nil {
		return m.SubscriptionID
	}
	return ""
}

func (m *SubscriptionTask) GetTerminationEndpointID() github_com_onosproject_onos_e2sub_api_e2_registry_v1beta1.ID {
	if m != nil {
		return m.TerminationEndpointID
	}
	return ""
}

func (m *SubscriptionTask) GetState() State {
	if m != nil {
		return m.State
	}
	return State{}
}

// Event is a SubscriptionTask event
type Event struct {
	Type EventType        `protobuf:"varint,1,opt,name=type,proto3,enum=task.v1beta1.EventType" json:"type,omitempty"`
	Task SubscriptionTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{2}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

func (m *Event) GetTask() SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return SubscriptionTask{}
}

// GetSubscriptionTaskRequest is a request for getting existing SubscriptionTask
type GetSubscriptionTaskRequest struct {
	ID ID `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
}

func (m *GetSubscriptionTaskRequest) Reset()         { *m = GetSubscriptionTaskRequest{} }
func (m *GetSubscriptionTaskRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionTaskRequest) ProtoMessage()    {}
func (*GetSubscriptionTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{3}
}
func (m *GetSubscriptionTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionTaskRequest.Merge(m, src)
}
func (m *GetSubscriptionTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionTaskRequest proto.InternalMessageInfo

func (m *GetSubscriptionTaskRequest) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

// GetSubscriptionTaskResponse is a response with invormation about a requested SubscriptionTask
type GetSubscriptionTaskResponse struct {
	Task *SubscriptionTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *GetSubscriptionTaskResponse) Reset()         { *m = GetSubscriptionTaskResponse{} }
func (m *GetSubscriptionTaskResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionTaskResponse) ProtoMessage()    {}
func (*GetSubscriptionTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{4}
}
func (m *GetSubscriptionTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionTaskResponse.Merge(m, src)
}
func (m *GetSubscriptionTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionTaskResponse proto.InternalMessageInfo

func (m *GetSubscriptionTaskResponse) GetTask() *SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

// ListSubscriptionTasksRequest is a request to list all available SubscriptionTasks
type ListSubscriptionTasksRequest struct {
}

func (m *ListSubscriptionTasksRequest) Reset()         { *m = ListSubscriptionTasksRequest{} }
func (m *ListSubscriptionTasksRequest) String() string { return proto.CompactTextString(m) }
func (*ListSubscriptionTasksRequest) ProtoMessage()    {}
func (*ListSubscriptionTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{5}
}
func (m *ListSubscriptionTasksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSubscriptionTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSubscriptionTasksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSubscriptionTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscriptionTasksRequest.Merge(m, src)
}
func (m *ListSubscriptionTasksRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSubscriptionTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscriptionTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscriptionTasksRequest proto.InternalMessageInfo

// ListSubscriptionTasksResponse is a response to list all available SubscriptionTasks
type ListSubscriptionTasksResponse struct {
	Task []SubscriptionTask `protobuf:"bytes,1,rep,name=task,proto3" json:"task"`
}

func (m *ListSubscriptionTasksResponse) Reset()         { *m = ListSubscriptionTasksResponse{} }
func (m *ListSubscriptionTasksResponse) String() string { return proto.CompactTextString(m) }
func (*ListSubscriptionTasksResponse) ProtoMessage()    {}
func (*ListSubscriptionTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{6}
}
func (m *ListSubscriptionTasksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSubscriptionTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSubscriptionTasksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSubscriptionTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscriptionTasksResponse.Merge(m, src)
}
func (m *ListSubscriptionTasksResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSubscriptionTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscriptionTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscriptionTasksResponse proto.InternalMessageInfo

func (m *ListSubscriptionTasksResponse) GetTask() []SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

// WatchSubscriptionTasksRequest is a request to receive a stream of all SubscriptionTask changes.
type WatchSubscriptionTasksRequest struct {
	Noreplay bool `protobuf:"varint,1,opt,name=noreplay,proto3" json:"noreplay,omitempty"`
}

func (m *WatchSubscriptionTasksRequest) Reset()         { *m = WatchSubscriptionTasksRequest{} }
func (m *WatchSubscriptionTasksRequest) String() string { return proto.CompactTextString(m) }
func (*WatchSubscriptionTasksRequest) ProtoMessage()    {}
func (*WatchSubscriptionTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{7}
}
func (m *WatchSubscriptionTasksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchSubscriptionTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchSubscriptionTasksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchSubscriptionTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSubscriptionTasksRequest.Merge(m, src)
}
func (m *WatchSubscriptionTasksRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchSubscriptionTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSubscriptionTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSubscriptionTasksRequest proto.InternalMessageInfo

func (m *WatchSubscriptionTasksRequest) GetNoreplay() bool {
	if m != nil {
		return m.Noreplay
	}
	return false
}

// WatchSubscriptionTasksResponse is a response indicating a change in the available SubscriptionTasks.
type WatchSubscriptionTasksResponse struct {
	Event Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event"`
}

func (m *WatchSubscriptionTasksResponse) Reset()         { *m = WatchSubscriptionTasksResponse{} }
func (m *WatchSubscriptionTasksResponse) String() string { return proto.CompactTextString(m) }
func (*WatchSubscriptionTasksResponse) ProtoMessage()    {}
func (*WatchSubscriptionTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{8}
}
func (m *WatchSubscriptionTasksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchSubscriptionTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchSubscriptionTasksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchSubscriptionTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSubscriptionTasksResponse.Merge(m, src)
}
func (m *WatchSubscriptionTasksResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchSubscriptionTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSubscriptionTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSubscriptionTasksResponse proto.InternalMessageInfo

func (m *WatchSubscriptionTasksResponse) GetEvent() Event {
	if m != nil {
		return m.Event
	}
	return Event{}
}

// UpdateSubscriptionTaskRequest is a request for updating a SubscriptionTask state
type UpdateSubscriptionTaskStateRequest struct {
	Task *SubscriptionTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *UpdateSubscriptionTaskStateRequest) Reset()         { *m = UpdateSubscriptionTaskStateRequest{} }
func (m *UpdateSubscriptionTaskStateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSubscriptionTaskStateRequest) ProtoMessage()    {}
func (*UpdateSubscriptionTaskStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{9}
}
func (m *UpdateSubscriptionTaskStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSubscriptionTaskStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSubscriptionTaskStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSubscriptionTaskStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSubscriptionTaskStateRequest.Merge(m, src)
}
func (m *UpdateSubscriptionTaskStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSubscriptionTaskStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSubscriptionTaskStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSubscriptionTaskStateRequest proto.InternalMessageInfo

func (m *UpdateSubscriptionTaskStateRequest) GetTask() *SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

// UpdateSubscriptionTaskResponse is a response to updating a SubscriptionTask state
type UpdateSubscriptionTaskStateResponse struct {
}

func (m *UpdateSubscriptionTaskStateResponse) Reset()         { *m = UpdateSubscriptionTaskStateResponse{} }
func (m *UpdateSubscriptionTaskStateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSubscriptionTaskStateResponse) ProtoMessage()    {}
func (*UpdateSubscriptionTaskStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a5e164775eadd8, []int{10}
}
func (m *UpdateSubscriptionTaskStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSubscriptionTaskStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSubscriptionTaskStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSubscriptionTaskStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSubscriptionTaskStateResponse.Merge(m, src)
}
func (m *UpdateSubscriptionTaskStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSubscriptionTaskStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSubscriptionTaskStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSubscriptionTaskStateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("task.v1beta1.Phase", Phase_name, Phase_value)
	proto.RegisterEnum("task.v1beta1.Status", Status_name, Status_value)
	proto.RegisterEnum("task.v1beta1.EventType", EventType_name, EventType_value)
	proto.RegisterType((*State)(nil), "task.v1beta1.State")
	proto.RegisterType((*SubscriptionTask)(nil), "task.v1beta1.SubscriptionTask")
	proto.RegisterType((*Event)(nil), "task.v1beta1.Event")
	proto.RegisterType((*GetSubscriptionTaskRequest)(nil), "task.v1beta1.GetSubscriptionTaskRequest")
	proto.RegisterType((*GetSubscriptionTaskResponse)(nil), "task.v1beta1.GetSubscriptionTaskResponse")
	proto.RegisterType((*ListSubscriptionTasksRequest)(nil), "task.v1beta1.ListSubscriptionTasksRequest")
	proto.RegisterType((*ListSubscriptionTasksResponse)(nil), "task.v1beta1.ListSubscriptionTasksResponse")
	proto.RegisterType((*WatchSubscriptionTasksRequest)(nil), "task.v1beta1.WatchSubscriptionTasksRequest")
	proto.RegisterType((*WatchSubscriptionTasksResponse)(nil), "task.v1beta1.WatchSubscriptionTasksResponse")
	proto.RegisterType((*UpdateSubscriptionTaskStateRequest)(nil), "task.v1beta1.UpdateSubscriptionTaskStateRequest")
	proto.RegisterType((*UpdateSubscriptionTaskStateResponse)(nil), "task.v1beta1.UpdateSubscriptionTaskStateResponse")
}

func init() { proto.RegisterFile("api/e2/task/v1beta1/task.proto", fileDescriptor_97a5e164775eadd8) }

var fileDescriptor_97a5e164775eadd8 = []byte{
	// 747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x4f, 0x1a, 0x5b,
	0x14, 0x66, 0x80, 0xf1, 0xe1, 0x91, 0xf8, 0xc8, 0x55, 0x9f, 0x3c, 0xd4, 0xc1, 0x8c, 0x79, 0x09,
	0xfe, 0x78, 0x8c, 0xd2, 0x8d, 0x69, 0x5d, 0xb4, 0xc8, 0xc4, 0x90, 0x28, 0xe0, 0x80, 0xb6, 0xae,
	0xda, 0x01, 0x6e, 0xf0, 0x6a, 0x9d, 0x99, 0xce, 0xbd, 0x90, 0xb0, 0x6a, 0xd2, 0xbf, 0xa0, 0xfd,
	0x0f, 0xfa, 0xe7, 0xb8, 0x74, 0xd9, 0x15, 0x69, 0xf0, 0x6f, 0xe8, 0xc6, 0x55, 0x33, 0x97, 0x0b,
	0x05, 0x04, 0x8a, 0xdd, 0x90, 0x39, 0x9c, 0xef, 0x7c, 0xdf, 0xc7, 0x39, 0x5f, 0x06, 0x50, 0x4c,
	0x87, 0x68, 0x38, 0xa5, 0x31, 0x93, 0x5e, 0x6b, 0x8d, 0xbd, 0x32, 0x66, 0xe6, 0x1e, 0x2f, 0x92,
	0x8e, 0x6b, 0x33, 0x1b, 0x85, 0xf9, 0xb3, 0x68, 0xc4, 0x16, 0x6b, 0x76, 0xcd, 0xe6, 0x0d, 0xcd,
	0x7b, 0xea, 0x60, 0xd4, 0x77, 0x20, 0x17, 0x99, 0xc9, 0x30, 0xda, 0x04, 0xd9, 0xb9, 0x34, 0x29,
	0x8e, 0x4a, 0xeb, 0x52, 0x62, 0x3e, 0xb5, 0x90, 0xec, 0x1f, 0x4e, 0x16, 0xbc, 0x96, 0xd1, 0x41,
	0xa0, 0x1d, 0x98, 0xa1, 0xcc, 0x64, 0x75, 0x1a, 0xf5, 0x73, 0xec, 0xe2, 0x20, 0xb6, 0xc8, 0x7b,
	0x86, 0xc0, 0xa8, 0x5f, 0x03, 0x10, 0x29, 0xd6, 0xcb, 0xb4, 0xe2, 0x12, 0x87, 0x11, 0xdb, 0x2a,
	0x99, 0xf4, 0x1a, 0xad, 0x82, 0x9f, 0x54, 0xb9, 0xd4, 0x6c, 0x3a, 0xdc, 0x6e, 0xc5, 0xfd, 0xd9,
	0xcc, 0x03, 0xff, 0x34, 0xfc, 0xa4, 0x8a, 0x12, 0x10, 0x72, 0x71, 0x83, 0x50, 0x62, 0x5b, 0x5c,
	0x22, 0x98, 0x0e, 0x3f, 0xb4, 0xe2, 0x21, 0x43, 0x7c, 0x67, 0xf4, 0xba, 0xe8, 0x23, 0xfc, 0x4d,
	0xfb, 0xb8, 0xdf, 0x92, 0x6a, 0x34, 0xc0, 0x49, 0xcf, 0xdb, 0xad, 0xf8, 0x7c, 0xbf, 0x2c, 0x17,
	0x78, 0x59, 0x23, 0xec, 0xb2, 0x5e, 0x4e, 0x56, 0xec, 0x1b, 0xcd, 0xb6, 0x6c, 0xea, 0xb8, 0xf6,
	0x15, 0xae, 0x30, 0xfe, 0xfc, 0x3f, 0x4e, 0xd1, 0x7a, 0x59, 0x13, 0x3b, 0xed, 0x67, 0xed, 0xee,
	0x36, 0x99, 0xcd, 0x18, 0xf3, 0xfd, 0x8d, 0x6c, 0x15, 0x7d, 0x91, 0x60, 0x99, 0x61, 0xf7, 0x86,
	0x58, 0x26, 0x37, 0x80, 0xad, 0xaa, 0x63, 0x13, 0x8b, 0x79, 0x4e, 0x82, 0xdc, 0xc9, 0x45, 0xbb,
	0x15, 0x5f, 0x2a, 0xfd, 0x82, 0xe8, 0x02, 0xc1, 0x0d, 0x1d, 0x4c, 0x6d, 0xc8, 0xc5, 0x35, 0x42,
	0x99, 0xdb, 0xec, 0x37, 0xb3, 0xc4, 0x46, 0xd0, 0x56, 0x91, 0x06, 0xb2, 0xb7, 0x7b, 0x1c, 0x95,
	0xd7, 0xa5, 0xc4, 0xdc, 0xf0, 0x29, 0xf9, 0xb9, 0xd3, 0xc1, 0xdb, 0x56, 0xdc, 0x67, 0x74, 0x70,
	0xaa, 0x05, 0xb2, 0xde, 0xc0, 0x16, 0x43, 0xdb, 0x10, 0x64, 0x4d, 0xa7, 0x9b, 0x81, 0xe5, 0xc1,
	0x41, 0x0e, 0x29, 0x35, 0x1d, 0x6c, 0x70, 0x10, 0xda, 0x87, 0xa0, 0xd7, 0xe7, 0x17, 0x9a, 0x4b,
	0x29, 0x43, 0x2a, 0x43, 0x17, 0x17, 0x82, 0x7c, 0x42, 0x7d, 0x0e, 0xb1, 0x23, 0xcc, 0x86, 0x21,
	0x06, 0xfe, 0x50, 0xc7, 0x94, 0x4d, 0xce, 0x86, 0x7a, 0x0a, 0x2b, 0x23, 0x67, 0xa9, 0x63, 0x5b,
	0x14, 0xa3, 0x94, 0x30, 0x25, 0x4d, 0x63, 0x4a, 0xd8, 0x51, 0x60, 0xf5, 0x98, 0xd0, 0x47, 0x9c,
	0x54, 0x18, 0x52, 0x2f, 0x60, 0x6d, 0x4c, 0x5f, 0x88, 0xee, 0xf7, 0x44, 0x03, 0x4f, 0xdc, 0xc4,
	0x0b, 0x58, 0x7b, 0x6d, 0xb2, 0xca, 0xe5, 0x38, 0x6d, 0x14, 0x83, 0x90, 0x65, 0xbb, 0xd8, 0x79,
	0x6f, 0x36, 0xf9, 0x6f, 0x0a, 0x19, 0xbd, 0x5a, 0x3d, 0x05, 0x65, 0xdc, 0xb0, 0x30, 0xa6, 0x81,
	0x8c, 0xbd, 0xab, 0x89, 0x75, 0x2c, 0x8c, 0x38, 0x68, 0x37, 0x09, 0x1c, 0xa7, 0xbe, 0x01, 0xf5,
	0xcc, 0xa9, 0x9a, 0x0c, 0x0f, 0x73, 0xf2, 0xd4, 0x74, 0x4d, 0xfd, 0xc9, 0x92, 0xff, 0x83, 0x8d,
	0x89, 0xcc, 0x1d, 0xc7, 0x5b, 0xab, 0x20, 0xf3, 0x77, 0x0d, 0x0a, 0x41, 0x30, 0x5f, 0xd0, 0x73,
	0x11, 0x1f, 0x9a, 0x05, 0xf9, 0xf0, 0x38, 0x5f, 0xd4, 0x23, 0xd2, 0xd6, 0x06, 0xcc, 0x74, 0xde,
	0x2e, 0x68, 0x0e, 0xfe, 0x2a, 0xe8, 0xb9, 0x4c, 0x36, 0x77, 0x14, 0xf1, 0xa1, 0x30, 0x84, 0x0e,
	0xf3, 0x27, 0x85, 0x63, 0xbd, 0xe4, 0x81, 0x0e, 0x60, 0xb6, 0x17, 0x55, 0x8f, 0x26, 0x97, 0xcf,
	0xe9, 0x11, 0x9f, 0x37, 0x71, 0x68, 0xe8, 0xaf, 0x4a, 0x7a, 0x26, 0x22, 0x79, 0xc5, 0x59, 0x21,
	0xc3, 0x0b, 0xbf, 0x57, 0x18, 0xfa, 0x49, 0xfe, 0x5c, 0xcf, 0x44, 0x02, 0xa9, 0x1f, 0x01, 0xf8,
	0x57, 0x4f, 0x3d, 0x32, 0x89, 0xdd, 0x06, 0xa9, 0x60, 0x74, 0x05, 0x0b, 0x23, 0xd2, 0x87, 0x12,
	0x83, 0x2b, 0x18, 0x1f, 0xee, 0xd8, 0xe6, 0x14, 0x48, 0x71, 0x3c, 0x07, 0x96, 0x46, 0xc6, 0x0e,
	0x6d, 0x0d, 0x72, 0x4c, 0xca, 0x6e, 0x6c, 0x7b, 0x2a, 0xac, 0x50, 0xac, 0xc3, 0x3f, 0xa3, 0x03,
	0x85, 0x86, 0x68, 0x26, 0x66, 0x36, 0xb6, 0x33, 0x1d, 0xb8, 0x23, 0xba, 0x2b, 0xa1, 0x4f, 0x12,
	0xac, 0x4c, 0xc8, 0x06, 0xda, 0x1d, 0xe4, 0xfb, 0x7d, 0x40, 0x63, 0x7b, 0x4f, 0x98, 0xe8, 0xd8,
	0x48, 0x47, 0x6f, 0xdb, 0x8a, 0x74, 0xd7, 0x56, 0xa4, 0xef, 0x6d, 0x45, 0xfa, 0x7c, 0xaf, 0xf8,
	0xee, 0xee, 0x15, 0xdf, 0xb7, 0x7b, 0xc5, 0x57, 0x9e, 0xe1, 0xff, 0x94, 0xcf, 0x7e, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x63, 0x52, 0x1c, 0x58, 0x6f, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// E2SubscriptionTaskServiceClient is the client API for E2SubscriptionTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type E2SubscriptionTaskServiceClient interface {
	// GetSubscriptionTask retrieves information about a specific task
	GetSubscriptionTask(ctx context.Context, in *GetSubscriptionTaskRequest, opts ...grpc.CallOption) (*GetSubscriptionTaskResponse, error)
	// ListSubscriptionTasks returns the list of currently registered E2 Tasks.
	ListSubscriptionTasks(ctx context.Context, in *ListSubscriptionTasksRequest, opts ...grpc.CallOption) (*ListSubscriptionTasksResponse, error)
	// WatchSubscriptionTasks returns a stream of changes in the set of available E2 Tasks.
	WatchSubscriptionTasks(ctx context.Context, in *WatchSubscriptionTasksRequest, opts ...grpc.CallOption) (E2SubscriptionTaskService_WatchSubscriptionTasksClient, error)
	// UpdateSubscriptionTaskState updates a task state
	UpdateSubscriptionTaskState(ctx context.Context, in *UpdateSubscriptionTaskStateRequest, opts ...grpc.CallOption) (*UpdateSubscriptionTaskStateResponse, error)
}

type e2SubscriptionTaskServiceClient struct {
	cc *grpc.ClientConn
}

func NewE2SubscriptionTaskServiceClient(cc *grpc.ClientConn) E2SubscriptionTaskServiceClient {
	return &e2SubscriptionTaskServiceClient{cc}
}

func (c *e2SubscriptionTaskServiceClient) GetSubscriptionTask(ctx context.Context, in *GetSubscriptionTaskRequest, opts ...grpc.CallOption) (*GetSubscriptionTaskResponse, error) {
	out := new(GetSubscriptionTaskResponse)
	err := c.cc.Invoke(ctx, "/task.v1beta1.E2SubscriptionTaskService/GetSubscriptionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionTaskServiceClient) ListSubscriptionTasks(ctx context.Context, in *ListSubscriptionTasksRequest, opts ...grpc.CallOption) (*ListSubscriptionTasksResponse, error) {
	out := new(ListSubscriptionTasksResponse)
	err := c.cc.Invoke(ctx, "/task.v1beta1.E2SubscriptionTaskService/ListSubscriptionTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionTaskServiceClient) WatchSubscriptionTasks(ctx context.Context, in *WatchSubscriptionTasksRequest, opts ...grpc.CallOption) (E2SubscriptionTaskService_WatchSubscriptionTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_E2SubscriptionTaskService_serviceDesc.Streams[0], "/task.v1beta1.E2SubscriptionTaskService/WatchSubscriptionTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &e2SubscriptionTaskServiceWatchSubscriptionTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type E2SubscriptionTaskService_WatchSubscriptionTasksClient interface {
	Recv() (*WatchSubscriptionTasksResponse, error)
	grpc.ClientStream
}

type e2SubscriptionTaskServiceWatchSubscriptionTasksClient struct {
	grpc.ClientStream
}

func (x *e2SubscriptionTaskServiceWatchSubscriptionTasksClient) Recv() (*WatchSubscriptionTasksResponse, error) {
	m := new(WatchSubscriptionTasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *e2SubscriptionTaskServiceClient) UpdateSubscriptionTaskState(ctx context.Context, in *UpdateSubscriptionTaskStateRequest, opts ...grpc.CallOption) (*UpdateSubscriptionTaskStateResponse, error) {
	out := new(UpdateSubscriptionTaskStateResponse)
	err := c.cc.Invoke(ctx, "/task.v1beta1.E2SubscriptionTaskService/UpdateSubscriptionTaskState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// E2SubscriptionTaskServiceServer is the server API for E2SubscriptionTaskService service.
type E2SubscriptionTaskServiceServer interface {
	// GetSubscriptionTask retrieves information about a specific task
	GetSubscriptionTask(context.Context, *GetSubscriptionTaskRequest) (*GetSubscriptionTaskResponse, error)
	// ListSubscriptionTasks returns the list of currently registered E2 Tasks.
	ListSubscriptionTasks(context.Context, *ListSubscriptionTasksRequest) (*ListSubscriptionTasksResponse, error)
	// WatchSubscriptionTasks returns a stream of changes in the set of available E2 Tasks.
	WatchSubscriptionTasks(*WatchSubscriptionTasksRequest, E2SubscriptionTaskService_WatchSubscriptionTasksServer) error
	// UpdateSubscriptionTaskState updates a task state
	UpdateSubscriptionTaskState(context.Context, *UpdateSubscriptionTaskStateRequest) (*UpdateSubscriptionTaskStateResponse, error)
}

// UnimplementedE2SubscriptionTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedE2SubscriptionTaskServiceServer struct {
}

func (*UnimplementedE2SubscriptionTaskServiceServer) GetSubscriptionTask(ctx context.Context, req *GetSubscriptionTaskRequest) (*GetSubscriptionTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionTask not implemented")
}
func (*UnimplementedE2SubscriptionTaskServiceServer) ListSubscriptionTasks(ctx context.Context, req *ListSubscriptionTasksRequest) (*ListSubscriptionTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionTasks not implemented")
}
func (*UnimplementedE2SubscriptionTaskServiceServer) WatchSubscriptionTasks(req *WatchSubscriptionTasksRequest, srv E2SubscriptionTaskService_WatchSubscriptionTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchSubscriptionTasks not implemented")
}
func (*UnimplementedE2SubscriptionTaskServiceServer) UpdateSubscriptionTaskState(ctx context.Context, req *UpdateSubscriptionTaskStateRequest) (*UpdateSubscriptionTaskStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionTaskState not implemented")
}

func RegisterE2SubscriptionTaskServiceServer(s *grpc.Server, srv E2SubscriptionTaskServiceServer) {
	s.RegisterService(&_E2SubscriptionTaskService_serviceDesc, srv)
}

func _E2SubscriptionTaskService_GetSubscriptionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionTaskServiceServer).GetSubscriptionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1beta1.E2SubscriptionTaskService/GetSubscriptionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionTaskServiceServer).GetSubscriptionTask(ctx, req.(*GetSubscriptionTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionTaskService_ListSubscriptionTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionTaskServiceServer).ListSubscriptionTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1beta1.E2SubscriptionTaskService/ListSubscriptionTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionTaskServiceServer).ListSubscriptionTasks(ctx, req.(*ListSubscriptionTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionTaskService_WatchSubscriptionTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchSubscriptionTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(E2SubscriptionTaskServiceServer).WatchSubscriptionTasks(m, &e2SubscriptionTaskServiceWatchSubscriptionTasksServer{stream})
}

type E2SubscriptionTaskService_WatchSubscriptionTasksServer interface {
	Send(*WatchSubscriptionTasksResponse) error
	grpc.ServerStream
}

type e2SubscriptionTaskServiceWatchSubscriptionTasksServer struct {
	grpc.ServerStream
}

func (x *e2SubscriptionTaskServiceWatchSubscriptionTasksServer) Send(m *WatchSubscriptionTasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _E2SubscriptionTaskService_UpdateSubscriptionTaskState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionTaskStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionTaskServiceServer).UpdateSubscriptionTaskState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.v1beta1.E2SubscriptionTaskService/UpdateSubscriptionTaskState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionTaskServiceServer).UpdateSubscriptionTaskState(ctx, req.(*UpdateSubscriptionTaskStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _E2SubscriptionTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.v1beta1.E2SubscriptionTaskService",
	HandlerType: (*E2SubscriptionTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscriptionTask",
			Handler:    _E2SubscriptionTaskService_GetSubscriptionTask_Handler,
		},
		{
			MethodName: "ListSubscriptionTasks",
			Handler:    _E2SubscriptionTaskService_ListSubscriptionTasks_Handler,
		},
		{
			MethodName: "UpdateSubscriptionTaskState",
			Handler:    _E2SubscriptionTaskService_UpdateSubscriptionTaskState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchSubscriptionTasks",
			Handler:       _E2SubscriptionTaskService_WatchSubscriptionTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/e2/task/v1beta1/task.proto",
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Phase != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscriptionTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTask(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.TerminationEndpointID) > 0 {
		i -= len(m.TerminationEndpointID)
		copy(dAtA[i:], m.TerminationEndpointID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TerminationEndpointID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubscriptionID) > 0 {
		i -= len(m.SubscriptionID)
		copy(dAtA[i:], m.SubscriptionID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.SubscriptionID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Revision != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTask(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscriptionTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscriptionTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSubscriptionTasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSubscriptionTasksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSubscriptionTasksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListSubscriptionTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSubscriptionTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSubscriptionTasksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Task) > 0 {
		for iNdEx := len(m.Task) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Task[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WatchSubscriptionTasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchSubscriptionTasksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchSubscriptionTasksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Noreplay {
		i--
		if m.Noreplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WatchSubscriptionTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchSubscriptionTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchSubscriptionTasksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTask(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpdateSubscriptionTaskStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSubscriptionTaskStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSubscriptionTaskStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSubscriptionTaskStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSubscriptionTaskStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSubscriptionTaskStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase != 0 {
		n += 1 + sovTask(uint64(m.Phase))
	}
	if m.Status != 0 {
		n += 1 + sovTask(uint64(m.Status))
	}
	return n
}

func (m *SubscriptionTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Revision != 0 {
		n += 1 + sovTask(uint64(m.Revision))
	}
	l = len(m.SubscriptionID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.TerminationEndpointID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = m.State.Size()
	n += 1 + l + sovTask(uint64(l))
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTask(uint64(m.Type))
	}
	l = m.Task.Size()
	n += 1 + l + sovTask(uint64(l))
	return n
}

func (m *GetSubscriptionTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *GetSubscriptionTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *ListSubscriptionTasksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListSubscriptionTasksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Task) > 0 {
		for _, e := range m.Task {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	return n
}

func (m *WatchSubscriptionTasksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Noreplay {
		n += 2
	}
	return n
}

func (m *WatchSubscriptionTasksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Event.Size()
	n += 1 + l + sovTask(uint64(l))
	return n
}

func (m *UpdateSubscriptionTaskStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *UpdateSubscriptionTaskStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= Phase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= Revision(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionID = github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationEndpointID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminationEndpointID = github_com_onosproject_onos_e2sub_api_e2_registry_v1beta1.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscriptionTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscriptionTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &SubscriptionTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSubscriptionTasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSubscriptionTasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSubscriptionTasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSubscriptionTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSubscriptionTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSubscriptionTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Task = append(m.Task, SubscriptionTask{})
			if err := m.Task[len(m.Task)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchSubscriptionTasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchSubscriptionTasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchSubscriptionTasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noreplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Noreplay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchSubscriptionTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchSubscriptionTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchSubscriptionTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSubscriptionTaskStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSubscriptionTaskStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSubscriptionTaskStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &SubscriptionTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSubscriptionTaskStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSubscriptionTaskStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSubscriptionTaskStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
