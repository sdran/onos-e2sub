// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/e2/registry/v1beta1/registry.proto

// Package ricapi.e2.registry.v1beta1 defines the interior gRPC interface for E2 termination registry service

package v1beta1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Type of change
type EventType int32

const (
	EventType_NONE    EventType = 0
	EventType_ADDED   EventType = 1
	EventType_REMOVED EventType = 3
)

var EventType_name = map[int32]string{
	0: "NONE",
	1: "ADDED",
	3: "REMOVED",
}

var EventType_value = map[string]int32{
	"NONE":    0,
	"ADDED":   1,
	"REMOVED": 3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{0}
}

// Termination is a record identifying the IP address and TCP port coordinates where the E2 termination
// service is available.
type TerminationEndPoint struct {
	ID   ID   `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	IP   IP   `protobuf:"bytes,2,opt,name=ip,proto3,casttype=IP" json:"ip,omitempty"`
	Port Port `protobuf:"varint,3,opt,name=port,proto3,casttype=Port" json:"port,omitempty"`
}

func (m *TerminationEndPoint) Reset()         { *m = TerminationEndPoint{} }
func (m *TerminationEndPoint) String() string { return proto.CompactTextString(m) }
func (*TerminationEndPoint) ProtoMessage()    {}
func (*TerminationEndPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{0}
}
func (m *TerminationEndPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminationEndPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminationEndPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminationEndPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminationEndPoint.Merge(m, src)
}
func (m *TerminationEndPoint) XXX_Size() int {
	return m.Size()
}
func (m *TerminationEndPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminationEndPoint.DiscardUnknown(m)
}

var xxx_messageInfo_TerminationEndPoint proto.InternalMessageInfo

func (m *TerminationEndPoint) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *TerminationEndPoint) GetIP() IP {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *TerminationEndPoint) GetPort() Port {
	if m != nil {
		return m.Port
	}
	return 0
}

// AddTerminationRequest is a request for adding a new termination point
type AddTerminationRequest struct {
	EndPoint *TerminationEndPoint `protobuf:"bytes,1,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`
}

func (m *AddTerminationRequest) Reset()         { *m = AddTerminationRequest{} }
func (m *AddTerminationRequest) String() string { return proto.CompactTextString(m) }
func (*AddTerminationRequest) ProtoMessage()    {}
func (*AddTerminationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{1}
}
func (m *AddTerminationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTerminationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTerminationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTerminationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTerminationRequest.Merge(m, src)
}
func (m *AddTerminationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTerminationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTerminationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTerminationRequest proto.InternalMessageInfo

func (m *AddTerminationRequest) GetEndPoint() *TerminationEndPoint {
	if m != nil {
		return m.EndPoint
	}
	return nil
}

// AddTerminationResponse is a response to adding a new termination point
type AddTerminationResponse struct {
}

func (m *AddTerminationResponse) Reset()         { *m = AddTerminationResponse{} }
func (m *AddTerminationResponse) String() string { return proto.CompactTextString(m) }
func (*AddTerminationResponse) ProtoMessage()    {}
func (*AddTerminationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{2}
}
func (m *AddTerminationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTerminationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTerminationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTerminationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTerminationResponse.Merge(m, src)
}
func (m *AddTerminationResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddTerminationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTerminationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddTerminationResponse proto.InternalMessageInfo

// RemoveTerminationRequest is a request for adding a new termination point
type RemoveTerminationRequest struct {
	EndPoint *TerminationEndPoint `protobuf:"bytes,1,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`
}

func (m *RemoveTerminationRequest) Reset()         { *m = RemoveTerminationRequest{} }
func (m *RemoveTerminationRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveTerminationRequest) ProtoMessage()    {}
func (*RemoveTerminationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{3}
}
func (m *RemoveTerminationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveTerminationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveTerminationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveTerminationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveTerminationRequest.Merge(m, src)
}
func (m *RemoveTerminationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveTerminationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveTerminationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveTerminationRequest proto.InternalMessageInfo

func (m *RemoveTerminationRequest) GetEndPoint() *TerminationEndPoint {
	if m != nil {
		return m.EndPoint
	}
	return nil
}

// RemoveTerminationResponse is a response to adding a new termination point
type RemoveTerminationResponse struct {
}

func (m *RemoveTerminationResponse) Reset()         { *m = RemoveTerminationResponse{} }
func (m *RemoveTerminationResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveTerminationResponse) ProtoMessage()    {}
func (*RemoveTerminationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{4}
}
func (m *RemoveTerminationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveTerminationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveTerminationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveTerminationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveTerminationResponse.Merge(m, src)
}
func (m *RemoveTerminationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveTerminationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveTerminationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveTerminationResponse proto.InternalMessageInfo

// ListTerminationsRequest is a request to list all available E2 terminations
type ListTerminationsRequest struct {
}

func (m *ListTerminationsRequest) Reset()         { *m = ListTerminationsRequest{} }
func (m *ListTerminationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTerminationsRequest) ProtoMessage()    {}
func (*ListTerminationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{5}
}
func (m *ListTerminationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTerminationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTerminationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTerminationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTerminationsRequest.Merge(m, src)
}
func (m *ListTerminationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTerminationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTerminationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTerminationsRequest proto.InternalMessageInfo

// ListTerminationsResponse is a response to list all available E2 terminations
type ListTerminationsResponse struct {
	EndPoints []TerminationEndPoint `protobuf:"bytes,1,rep,name=end_points,json=endPoints,proto3" json:"end_points"`
}

func (m *ListTerminationsResponse) Reset()         { *m = ListTerminationsResponse{} }
func (m *ListTerminationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTerminationsResponse) ProtoMessage()    {}
func (*ListTerminationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{6}
}
func (m *ListTerminationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTerminationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTerminationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTerminationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTerminationsResponse.Merge(m, src)
}
func (m *ListTerminationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTerminationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTerminationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTerminationsResponse proto.InternalMessageInfo

func (m *ListTerminationsResponse) GetEndPoints() []TerminationEndPoint {
	if m != nil {
		return m.EndPoints
	}
	return nil
}

// WatchTerminationsRequest is a request to receive a stream of all E2 termination changes.
type WatchTerminationsRequest struct {
	Noreplay bool `protobuf:"varint,2,opt,name=noreplay,proto3" json:"noreplay,omitempty"`
}

func (m *WatchTerminationsRequest) Reset()         { *m = WatchTerminationsRequest{} }
func (m *WatchTerminationsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchTerminationsRequest) ProtoMessage()    {}
func (*WatchTerminationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{7}
}
func (m *WatchTerminationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchTerminationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchTerminationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchTerminationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchTerminationsRequest.Merge(m, src)
}
func (m *WatchTerminationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchTerminationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchTerminationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchTerminationsRequest proto.InternalMessageInfo

func (m *WatchTerminationsRequest) GetNoreplay() bool {
	if m != nil {
		return m.Noreplay
	}
	return false
}

// WatchTerminationsResponse is a response indicating a change in the available E2 termination end-points.
type WatchTerminationsResponse struct {
	Type     EventType           `protobuf:"varint,1,opt,name=type,proto3,enum=subscription.v1beta1.EventType" json:"type,omitempty"`
	EndPoint TerminationEndPoint `protobuf:"bytes,2,opt,name=end_point,json=endPoint,proto3" json:"end_point"`
}

func (m *WatchTerminationsResponse) Reset()         { *m = WatchTerminationsResponse{} }
func (m *WatchTerminationsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchTerminationsResponse) ProtoMessage()    {}
func (*WatchTerminationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88f90013d872b641, []int{8}
}
func (m *WatchTerminationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchTerminationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchTerminationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchTerminationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchTerminationsResponse.Merge(m, src)
}
func (m *WatchTerminationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchTerminationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchTerminationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchTerminationsResponse proto.InternalMessageInfo

func (m *WatchTerminationsResponse) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

func (m *WatchTerminationsResponse) GetEndPoint() TerminationEndPoint {
	if m != nil {
		return m.EndPoint
	}
	return TerminationEndPoint{}
}

func init() {
	proto.RegisterEnum("subscription.v1beta1.EventType", EventType_name, EventType_value)
	proto.RegisterType((*TerminationEndPoint)(nil), "subscription.v1beta1.TerminationEndPoint")
	proto.RegisterType((*AddTerminationRequest)(nil), "subscription.v1beta1.AddTerminationRequest")
	proto.RegisterType((*AddTerminationResponse)(nil), "subscription.v1beta1.AddTerminationResponse")
	proto.RegisterType((*RemoveTerminationRequest)(nil), "subscription.v1beta1.RemoveTerminationRequest")
	proto.RegisterType((*RemoveTerminationResponse)(nil), "subscription.v1beta1.RemoveTerminationResponse")
	proto.RegisterType((*ListTerminationsRequest)(nil), "subscription.v1beta1.ListTerminationsRequest")
	proto.RegisterType((*ListTerminationsResponse)(nil), "subscription.v1beta1.ListTerminationsResponse")
	proto.RegisterType((*WatchTerminationsRequest)(nil), "subscription.v1beta1.WatchTerminationsRequest")
	proto.RegisterType((*WatchTerminationsResponse)(nil), "subscription.v1beta1.WatchTerminationsResponse")
}

func init() {
	proto.RegisterFile("api/e2/registry/v1beta1/registry.proto", fileDescriptor_88f90013d872b641)
}

var fileDescriptor_88f90013d872b641 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xdf, 0x6e, 0x12, 0x4d,
	0x18, 0xc6, 0x99, 0x85, 0xef, 0x13, 0xde, 0x6a, 0x03, 0x63, 0xd5, 0x05, 0xcd, 0x42, 0x36, 0xc6,
	0xd4, 0x3f, 0x5d, 0x2c, 0x4d, 0x3c, 0x2f, 0x61, 0x4d, 0x4c, 0x2a, 0x25, 0x63, 0xa3, 0x87, 0x0d,
	0xb0, 0x13, 0x1c, 0xb5, 0x3b, 0xd3, 0x9d, 0x29, 0x86, 0xbb, 0xf0, 0x0a, 0xbc, 0x9e, 0x1e, 0xf6,
	0xd0, 0x23, 0xa2, 0x70, 0x17, 0x3d, 0x32, 0x4c, 0xc7, 0x0d, 0x96, 0xd9, 0x84, 0x1e, 0x78, 0x02,
	0xb3, 0xfb, 0x3e, 0x33, 0xcf, 0xef, 0x7d, 0xf7, 0xd9, 0x85, 0x27, 0x7d, 0xc1, 0x9a, 0xb4, 0xd5,
	0x4c, 0xe8, 0x88, 0x49, 0x95, 0x4c, 0x9a, 0xe3, 0xdd, 0x01, 0x55, 0xfd, 0xdd, 0xf4, 0x46, 0x20,
	0x12, 0xae, 0x38, 0xde, 0x92, 0x67, 0x03, 0x39, 0x4c, 0x98, 0x50, 0x8c, 0xc7, 0x81, 0x11, 0xd5,
	0xb6, 0x46, 0x7c, 0xc4, 0xb5, 0xa0, 0xb9, 0x58, 0x5d, 0x69, 0xfd, 0xaf, 0x70, 0xf7, 0x88, 0x26,
	0x27, 0x2c, 0xee, 0x2f, 0xc4, 0x61, 0x1c, 0xf5, 0x38, 0x8b, 0x15, 0x7e, 0x04, 0x0e, 0x8b, 0x5c,
	0xd4, 0x40, 0xdb, 0xa5, 0xf6, 0xed, 0xd9, 0xb4, 0xee, 0xbc, 0xe9, 0x5c, 0xea, 0x5f, 0xe2, 0xb0,
	0x48, 0x57, 0x85, 0xeb, 0x2c, 0x55, 0x7b, 0xba, 0xda, 0x23, 0x0e, 0x13, 0xf8, 0x31, 0x14, 0x04,
	0x4f, 0x94, 0x9b, 0x6f, 0xa0, 0xed, 0x3b, 0xed, 0xf2, 0x6c, 0x5a, 0x2f, 0xf4, 0x78, 0xa2, 0x2e,
	0xcd, 0x3f, 0xd1, 0x55, 0xff, 0x18, 0xee, 0xed, 0x47, 0xd1, 0x92, 0x37, 0xa1, 0xa7, 0x67, 0x54,
	0x2a, 0xfc, 0x1a, 0x4a, 0x34, 0x8e, 0x8e, 0xc5, 0x82, 0x43, 0x13, 0x6c, 0xb4, 0x9e, 0x06, 0xb6,
	0x8e, 0x02, 0x0b, 0x38, 0x29, 0x52, 0xb3, 0xf2, 0x5d, 0xb8, 0x7f, 0xdd, 0x40, 0x0a, 0x1e, 0x4b,
	0xea, 0x0f, 0xc0, 0x25, 0xf4, 0x84, 0x8f, 0xe9, 0x3f, 0x74, 0x7f, 0x08, 0x55, 0x8b, 0x87, 0x01,
	0xa8, 0xc2, 0x83, 0x03, 0x26, 0xd5, 0x52, 0x49, 0x1a, 0x7f, 0xff, 0x13, 0xb8, 0xab, 0xa5, 0xab,
	0x6d, 0xb8, 0x0b, 0x90, 0xb2, 0x49, 0x17, 0x35, 0xf2, 0x37, 0x82, 0x6b, 0x17, 0xce, 0xa7, 0xf5,
	0x1c, 0x29, 0xfd, 0x41, 0x94, 0xfe, 0x2b, 0x70, 0x3f, 0xf4, 0xd5, 0xf0, 0xa3, 0x85, 0x03, 0xd7,
	0xa0, 0x18, 0xf3, 0x84, 0x8a, 0x2f, 0xfd, 0x89, 0x7e, 0xd0, 0x45, 0x92, 0x5e, 0xfb, 0xdf, 0x11,
	0x54, 0x2d, 0x1b, 0x0d, 0xe5, 0x1e, 0x14, 0xd4, 0x44, 0x50, 0x3d, 0xbc, 0xcd, 0x56, 0xdd, 0xce,
	0x17, 0x8e, 0x69, 0xac, 0x8e, 0x26, 0x82, 0x12, 0x2d, 0xc6, 0x07, 0xcb, 0x63, 0x77, 0x6e, 0x38,
	0x76, 0xd3, 0x59, 0x3a, 0xfc, 0x67, 0x3b, 0x50, 0x4a, 0x0d, 0x70, 0x11, 0x0a, 0xdd, 0xc3, 0x6e,
	0x58, 0xce, 0xe1, 0x12, 0xfc, 0xb7, 0xdf, 0xe9, 0x84, 0x9d, 0x32, 0xc2, 0x1b, 0x70, 0x8b, 0x84,
	0x6f, 0x0f, 0xdf, 0x87, 0x9d, 0x72, 0xbe, 0xf5, 0x2b, 0x0f, 0x95, 0xb0, 0x45, 0xcc, 0x4b, 0xf4,
	0x8e, 0x26, 0x63, 0x36, 0xa4, 0xf8, 0x33, 0x6c, 0xfe, 0x9d, 0x1f, 0xfc, 0xdc, 0x4e, 0x64, 0x8d,
	0x71, 0xed, 0xc5, 0x7a, 0x62, 0x33, 0x34, 0x05, 0x95, 0x95, 0xb8, 0xe0, 0xc0, 0x7e, 0x44, 0x56,
	0x76, 0x6b, 0xcd, 0xb5, 0xf5, 0xc6, 0xf5, 0x14, 0xca, 0xd7, 0xc3, 0x86, 0x77, 0xec, 0x87, 0x64,
	0xe4, 0xb5, 0x16, 0xac, 0x2b, 0x37, 0x96, 0x63, 0xa8, 0xac, 0x44, 0x27, 0xab, 0xd1, 0xac, 0x70,
	0x66, 0x35, 0x9a, 0x99, 0xc9, 0x97, 0xa8, 0xed, 0x9e, 0xcf, 0x3c, 0x74, 0x31, 0xf3, 0xd0, 0xcf,
	0x99, 0x87, 0xbe, 0xcd, 0xbd, 0xdc, 0xc5, 0xdc, 0xcb, 0xfd, 0x98, 0x7b, 0xb9, 0xc1, 0xff, 0xfa,
	0x43, 0xb8, 0xf7, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x05, 0x90, 0x3e, 0xc7, 0x5e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// E2RegistryServiceClient is the client API for E2RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type E2RegistryServiceClient interface {
	// AddTermination registers new E2 termination end-point.
	AddTermination(ctx context.Context, in *AddTerminationRequest, opts ...grpc.CallOption) (*AddTerminationResponse, error)
	// RemoveTermination removes the specified E2 termination end-point.
	RemoveTermination(ctx context.Context, in *RemoveTerminationRequest, opts ...grpc.CallOption) (*RemoveTerminationResponse, error)
	// ListTerminations returns the list of currently registered E2 terminations.
	ListTerminations(ctx context.Context, in *ListTerminationsRequest, opts ...grpc.CallOption) (*ListTerminationsResponse, error)
	// WatchTerminations returns a stream of changes in the set of available E2 terminations.
	WatchTerminations(ctx context.Context, in *WatchTerminationsRequest, opts ...grpc.CallOption) (E2RegistryService_WatchTerminationsClient, error)
}

type e2RegistryServiceClient struct {
	cc *grpc.ClientConn
}

func NewE2RegistryServiceClient(cc *grpc.ClientConn) E2RegistryServiceClient {
	return &e2RegistryServiceClient{cc}
}

func (c *e2RegistryServiceClient) AddTermination(ctx context.Context, in *AddTerminationRequest, opts ...grpc.CallOption) (*AddTerminationResponse, error) {
	out := new(AddTerminationResponse)
	err := c.cc.Invoke(ctx, "/subscription.v1beta1.E2RegistryService/AddTermination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2RegistryServiceClient) RemoveTermination(ctx context.Context, in *RemoveTerminationRequest, opts ...grpc.CallOption) (*RemoveTerminationResponse, error) {
	out := new(RemoveTerminationResponse)
	err := c.cc.Invoke(ctx, "/subscription.v1beta1.E2RegistryService/RemoveTermination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2RegistryServiceClient) ListTerminations(ctx context.Context, in *ListTerminationsRequest, opts ...grpc.CallOption) (*ListTerminationsResponse, error) {
	out := new(ListTerminationsResponse)
	err := c.cc.Invoke(ctx, "/subscription.v1beta1.E2RegistryService/ListTerminations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2RegistryServiceClient) WatchTerminations(ctx context.Context, in *WatchTerminationsRequest, opts ...grpc.CallOption) (E2RegistryService_WatchTerminationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_E2RegistryService_serviceDesc.Streams[0], "/subscription.v1beta1.E2RegistryService/WatchTerminations", opts...)
	if err != nil {
		return nil, err
	}
	x := &e2RegistryServiceWatchTerminationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type E2RegistryService_WatchTerminationsClient interface {
	Recv() (*WatchTerminationsResponse, error)
	grpc.ClientStream
}

type e2RegistryServiceWatchTerminationsClient struct {
	grpc.ClientStream
}

func (x *e2RegistryServiceWatchTerminationsClient) Recv() (*WatchTerminationsResponse, error) {
	m := new(WatchTerminationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// E2RegistryServiceServer is the server API for E2RegistryService service.
type E2RegistryServiceServer interface {
	// AddTermination registers new E2 termination end-point.
	AddTermination(context.Context, *AddTerminationRequest) (*AddTerminationResponse, error)
	// RemoveTermination removes the specified E2 termination end-point.
	RemoveTermination(context.Context, *RemoveTerminationRequest) (*RemoveTerminationResponse, error)
	// ListTerminations returns the list of currently registered E2 terminations.
	ListTerminations(context.Context, *ListTerminationsRequest) (*ListTerminationsResponse, error)
	// WatchTerminations returns a stream of changes in the set of available E2 terminations.
	WatchTerminations(*WatchTerminationsRequest, E2RegistryService_WatchTerminationsServer) error
}

// UnimplementedE2RegistryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedE2RegistryServiceServer struct {
}

func (*UnimplementedE2RegistryServiceServer) AddTermination(ctx context.Context, req *AddTerminationRequest) (*AddTerminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTermination not implemented")
}
func (*UnimplementedE2RegistryServiceServer) RemoveTermination(ctx context.Context, req *RemoveTerminationRequest) (*RemoveTerminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTermination not implemented")
}
func (*UnimplementedE2RegistryServiceServer) ListTerminations(ctx context.Context, req *ListTerminationsRequest) (*ListTerminationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTerminations not implemented")
}
func (*UnimplementedE2RegistryServiceServer) WatchTerminations(req *WatchTerminationsRequest, srv E2RegistryService_WatchTerminationsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTerminations not implemented")
}

func RegisterE2RegistryServiceServer(s *grpc.Server, srv E2RegistryServiceServer) {
	s.RegisterService(&_E2RegistryService_serviceDesc, srv)
}

func _E2RegistryService_AddTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTerminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2RegistryServiceServer).AddTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.v1beta1.E2RegistryService/AddTermination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2RegistryServiceServer).AddTermination(ctx, req.(*AddTerminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2RegistryService_RemoveTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTerminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2RegistryServiceServer).RemoveTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.v1beta1.E2RegistryService/RemoveTermination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2RegistryServiceServer).RemoveTermination(ctx, req.(*RemoveTerminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2RegistryService_ListTerminations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTerminationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2RegistryServiceServer).ListTerminations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.v1beta1.E2RegistryService/ListTerminations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2RegistryServiceServer).ListTerminations(ctx, req.(*ListTerminationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2RegistryService_WatchTerminations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTerminationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(E2RegistryServiceServer).WatchTerminations(m, &e2RegistryServiceWatchTerminationsServer{stream})
}

type E2RegistryService_WatchTerminationsServer interface {
	Send(*WatchTerminationsResponse) error
	grpc.ServerStream
}

type e2RegistryServiceWatchTerminationsServer struct {
	grpc.ServerStream
}

func (x *e2RegistryServiceWatchTerminationsServer) Send(m *WatchTerminationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _E2RegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.v1beta1.E2RegistryService",
	HandlerType: (*E2RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTermination",
			Handler:    _E2RegistryService_AddTermination_Handler,
		},
		{
			MethodName: "RemoveTermination",
			Handler:    _E2RegistryService_RemoveTermination_Handler,
		},
		{
			MethodName: "ListTerminations",
			Handler:    _E2RegistryService_ListTerminations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTerminations",
			Handler:       _E2RegistryService_WatchTerminations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/e2/registry/v1beta1/registry.proto",
}

func (m *TerminationEndPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminationEndPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminationEndPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddTerminationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTerminationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTerminationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndPoint != nil {
		{
			size, err := m.EndPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddTerminationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTerminationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTerminationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveTerminationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveTerminationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveTerminationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndPoint != nil {
		{
			size, err := m.EndPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveTerminationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveTerminationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveTerminationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListTerminationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTerminationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTerminationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListTerminationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTerminationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTerminationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndPoints) > 0 {
		for iNdEx := len(m.EndPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EndPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegistry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WatchTerminationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchTerminationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchTerminationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Noreplay {
		i--
		if m.Noreplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *WatchTerminationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchTerminationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchTerminationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EndPoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRegistry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TerminationEndPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovRegistry(uint64(m.Port))
	}
	return n
}

func (m *AddTerminationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndPoint != nil {
		l = m.EndPoint.Size()
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *AddTerminationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveTerminationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndPoint != nil {
		l = m.EndPoint.Size()
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *RemoveTerminationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListTerminationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListTerminationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EndPoints) > 0 {
		for _, e := range m.EndPoints {
			l = e.Size()
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func (m *WatchTerminationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Noreplay {
		n += 2
	}
	return n
}

func (m *WatchTerminationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRegistry(uint64(m.Type))
	}
	l = m.EndPoint.Size()
	n += 1 + l + sovRegistry(uint64(l))
	return n
}

func sovRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistry(x uint64) (n int) {
	return sovRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TerminationEndPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminationEndPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminationEndPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = IP(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= Port(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTerminationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTerminationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTerminationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndPoint == nil {
				m.EndPoint = &TerminationEndPoint{}
			}
			if err := m.EndPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTerminationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTerminationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTerminationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveTerminationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveTerminationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveTerminationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndPoint == nil {
				m.EndPoint = &TerminationEndPoint{}
			}
			if err := m.EndPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveTerminationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveTerminationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveTerminationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTerminationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTerminationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTerminationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTerminationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTerminationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTerminationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndPoints = append(m.EndPoints, TerminationEndPoint{})
			if err := m.EndPoints[len(m.EndPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchTerminationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchTerminationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchTerminationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noreplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Noreplay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchTerminationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchTerminationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchTerminationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegistry = fmt.Errorf("proto: unexpected end of group")
)
